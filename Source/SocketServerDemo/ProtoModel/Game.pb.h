// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Game.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Game_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Game_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Game_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Game_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Game_2eproto;
namespace ProtoModel {
class ActorTransform;
struct ActorTransformDefaultTypeInternal;
extern ActorTransformDefaultTypeInternal _ActorTransform_default_instance_;
}  // namespace ProtoModel
PROTOBUF_NAMESPACE_OPEN
template<> ::ProtoModel::ActorTransform* Arena::CreateMaybeMessage<::ProtoModel::ActorTransform>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ProtoModel {

// ===================================================================

class ActorTransform final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoModel.ActorTransform) */ {
 public:
  inline ActorTransform() : ActorTransform(nullptr) {}
  ~ActorTransform() override;
  explicit constexpr ActorTransform(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActorTransform(const ActorTransform& from);
  ActorTransform(ActorTransform&& from) noexcept
    : ActorTransform() {
    *this = ::std::move(from);
  }

  inline ActorTransform& operator=(const ActorTransform& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActorTransform& operator=(ActorTransform&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActorTransform& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActorTransform* internal_default_instance() {
    return reinterpret_cast<const ActorTransform*>(
               &_ActorTransform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ActorTransform& a, ActorTransform& b) {
    a.Swap(&b);
  }
  inline void Swap(ActorTransform* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActorTransform* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActorTransform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActorTransform>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActorTransform& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ActorTransform& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActorTransform* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoModel.ActorTransform";
  }
  protected:
  explicit ActorTransform(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVectorXFieldNumber = 1,
    kVectorYFieldNumber = 2,
    kVectorZFieldNumber = 3,
    kRotatorYawFieldNumber = 4,
    kRotatorRollFieldNumber = 5,
    kRotatorPitchFieldNumber = 6,
  };
  // float VectorX = 1;
  void clear_vectorx();
  float vectorx() const;
  void set_vectorx(float value);
  private:
  float _internal_vectorx() const;
  void _internal_set_vectorx(float value);
  public:

  // float VectorY = 2;
  void clear_vectory();
  float vectory() const;
  void set_vectory(float value);
  private:
  float _internal_vectory() const;
  void _internal_set_vectory(float value);
  public:

  // float VectorZ = 3;
  void clear_vectorz();
  float vectorz() const;
  void set_vectorz(float value);
  private:
  float _internal_vectorz() const;
  void _internal_set_vectorz(float value);
  public:

  // float RotatorYaw = 4;
  void clear_rotatoryaw();
  float rotatoryaw() const;
  void set_rotatoryaw(float value);
  private:
  float _internal_rotatoryaw() const;
  void _internal_set_rotatoryaw(float value);
  public:

  // float RotatorRoll = 5;
  void clear_rotatorroll();
  float rotatorroll() const;
  void set_rotatorroll(float value);
  private:
  float _internal_rotatorroll() const;
  void _internal_set_rotatorroll(float value);
  public:

  // float RotatorPitch = 6;
  void clear_rotatorpitch();
  float rotatorpitch() const;
  void set_rotatorpitch(float value);
  private:
  float _internal_rotatorpitch() const;
  void _internal_set_rotatorpitch(float value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoModel.ActorTransform)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float vectorx_;
  float vectory_;
  float vectorz_;
  float rotatoryaw_;
  float rotatorroll_;
  float rotatorpitch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Game_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ActorTransform

// float VectorX = 1;
inline void ActorTransform::clear_vectorx() {
  vectorx_ = 0;
}
inline float ActorTransform::_internal_vectorx() const {
  return vectorx_;
}
inline float ActorTransform::vectorx() const {
  // @@protoc_insertion_point(field_get:ProtoModel.ActorTransform.VectorX)
  return _internal_vectorx();
}
inline void ActorTransform::_internal_set_vectorx(float value) {
  
  vectorx_ = value;
}
inline void ActorTransform::set_vectorx(float value) {
  _internal_set_vectorx(value);
  // @@protoc_insertion_point(field_set:ProtoModel.ActorTransform.VectorX)
}

// float VectorY = 2;
inline void ActorTransform::clear_vectory() {
  vectory_ = 0;
}
inline float ActorTransform::_internal_vectory() const {
  return vectory_;
}
inline float ActorTransform::vectory() const {
  // @@protoc_insertion_point(field_get:ProtoModel.ActorTransform.VectorY)
  return _internal_vectory();
}
inline void ActorTransform::_internal_set_vectory(float value) {
  
  vectory_ = value;
}
inline void ActorTransform::set_vectory(float value) {
  _internal_set_vectory(value);
  // @@protoc_insertion_point(field_set:ProtoModel.ActorTransform.VectorY)
}

// float VectorZ = 3;
inline void ActorTransform::clear_vectorz() {
  vectorz_ = 0;
}
inline float ActorTransform::_internal_vectorz() const {
  return vectorz_;
}
inline float ActorTransform::vectorz() const {
  // @@protoc_insertion_point(field_get:ProtoModel.ActorTransform.VectorZ)
  return _internal_vectorz();
}
inline void ActorTransform::_internal_set_vectorz(float value) {
  
  vectorz_ = value;
}
inline void ActorTransform::set_vectorz(float value) {
  _internal_set_vectorz(value);
  // @@protoc_insertion_point(field_set:ProtoModel.ActorTransform.VectorZ)
}

// float RotatorYaw = 4;
inline void ActorTransform::clear_rotatoryaw() {
  rotatoryaw_ = 0;
}
inline float ActorTransform::_internal_rotatoryaw() const {
  return rotatoryaw_;
}
inline float ActorTransform::rotatoryaw() const {
  // @@protoc_insertion_point(field_get:ProtoModel.ActorTransform.RotatorYaw)
  return _internal_rotatoryaw();
}
inline void ActorTransform::_internal_set_rotatoryaw(float value) {
  
  rotatoryaw_ = value;
}
inline void ActorTransform::set_rotatoryaw(float value) {
  _internal_set_rotatoryaw(value);
  // @@protoc_insertion_point(field_set:ProtoModel.ActorTransform.RotatorYaw)
}

// float RotatorRoll = 5;
inline void ActorTransform::clear_rotatorroll() {
  rotatorroll_ = 0;
}
inline float ActorTransform::_internal_rotatorroll() const {
  return rotatorroll_;
}
inline float ActorTransform::rotatorroll() const {
  // @@protoc_insertion_point(field_get:ProtoModel.ActorTransform.RotatorRoll)
  return _internal_rotatorroll();
}
inline void ActorTransform::_internal_set_rotatorroll(float value) {
  
  rotatorroll_ = value;
}
inline void ActorTransform::set_rotatorroll(float value) {
  _internal_set_rotatorroll(value);
  // @@protoc_insertion_point(field_set:ProtoModel.ActorTransform.RotatorRoll)
}

// float RotatorPitch = 6;
inline void ActorTransform::clear_rotatorpitch() {
  rotatorpitch_ = 0;
}
inline float ActorTransform::_internal_rotatorpitch() const {
  return rotatorpitch_;
}
inline float ActorTransform::rotatorpitch() const {
  // @@protoc_insertion_point(field_get:ProtoModel.ActorTransform.RotatorPitch)
  return _internal_rotatorpitch();
}
inline void ActorTransform::_internal_set_rotatorpitch(float value) {
  
  rotatorpitch_ = value;
}
inline void ActorTransform::set_rotatorpitch(float value) {
  _internal_set_rotatorpitch(value);
  // @@protoc_insertion_point(field_set:ProtoModel.ActorTransform.RotatorPitch)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoModel

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Game_2eproto
