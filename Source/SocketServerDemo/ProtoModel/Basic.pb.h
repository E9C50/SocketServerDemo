// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Basic.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Basic_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Basic_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Basic_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Basic_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Basic_2eproto;
namespace ProtoModel {
class BaseReq;
struct BaseReqDefaultTypeInternal;
extern BaseReqDefaultTypeInternal _BaseReq_default_instance_;
class BaseRes;
struct BaseResDefaultTypeInternal;
extern BaseResDefaultTypeInternal _BaseRes_default_instance_;
}  // namespace ProtoModel
PROTOBUF_NAMESPACE_OPEN
template<> ::ProtoModel::BaseReq* Arena::CreateMaybeMessage<::ProtoModel::BaseReq>(Arena*);
template<> ::ProtoModel::BaseRes* Arena::CreateMaybeMessage<::ProtoModel::BaseRes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ProtoModel {

enum ResStatus : int {
  STATUS_NONE = 0,
  STATUS_SUCCESS = 1,
  STATUS_ERROR = 2,
  ResStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ResStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ResStatus_IsValid(int value);
constexpr ResStatus ResStatus_MIN = STATUS_NONE;
constexpr ResStatus ResStatus_MAX = STATUS_ERROR;
constexpr int ResStatus_ARRAYSIZE = ResStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResStatus_descriptor();
template<typename T>
inline const std::string& ResStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResStatus_descriptor(), enum_t_value);
}
inline bool ResStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ResStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResStatus>(
    ResStatus_descriptor(), name, value);
}
enum DataOrderType : int {
  ORDER_NONE = 0,
  ORDER_LOGIN = 1,
  ORDER_TRANSFORM = 2,
  DataOrderType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DataOrderType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DataOrderType_IsValid(int value);
constexpr DataOrderType DataOrderType_MIN = ORDER_NONE;
constexpr DataOrderType DataOrderType_MAX = ORDER_TRANSFORM;
constexpr int DataOrderType_ARRAYSIZE = DataOrderType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataOrderType_descriptor();
template<typename T>
inline const std::string& DataOrderType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DataOrderType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DataOrderType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DataOrderType_descriptor(), enum_t_value);
}
inline bool DataOrderType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DataOrderType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DataOrderType>(
    DataOrderType_descriptor(), name, value);
}
// ===================================================================

class BaseReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoModel.BaseReq) */ {
 public:
  inline BaseReq() : BaseReq(nullptr) {}
  ~BaseReq() override;
  explicit constexpr BaseReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BaseReq(const BaseReq& from);
  BaseReq(BaseReq&& from) noexcept
    : BaseReq() {
    *this = ::std::move(from);
  }

  inline BaseReq& operator=(const BaseReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseReq& operator=(BaseReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BaseReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const BaseReq* internal_default_instance() {
    return reinterpret_cast<const BaseReq*>(
               &_BaseReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BaseReq& a, BaseReq& b) {
    a.Swap(&b);
  }
  inline void Swap(BaseReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaseReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BaseReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BaseReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BaseReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BaseReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaseReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoModel.BaseReq";
  }
  protected:
  explicit BaseReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBodyFieldNumber = 2,
    kOrderFieldNumber = 1,
  };
  // bytes body = 2;
  void clear_body();
  const std::string& body() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_body(ArgT0&& arg0, ArgT... args);
  std::string* mutable_body();
  PROTOBUF_NODISCARD std::string* release_body();
  void set_allocated_body(std::string* body);
  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // .ProtoModel.DataOrderType order = 1;
  void clear_order();
  ::ProtoModel::DataOrderType order() const;
  void set_order(::ProtoModel::DataOrderType value);
  private:
  ::ProtoModel::DataOrderType _internal_order() const;
  void _internal_set_order(::ProtoModel::DataOrderType value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoModel.BaseReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  int order_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Basic_2eproto;
};
// -------------------------------------------------------------------

class BaseRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoModel.BaseRes) */ {
 public:
  inline BaseRes() : BaseRes(nullptr) {}
  ~BaseRes() override;
  explicit constexpr BaseRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BaseRes(const BaseRes& from);
  BaseRes(BaseRes&& from) noexcept
    : BaseRes() {
    *this = ::std::move(from);
  }

  inline BaseRes& operator=(const BaseRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseRes& operator=(BaseRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BaseRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const BaseRes* internal_default_instance() {
    return reinterpret_cast<const BaseRes*>(
               &_BaseRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BaseRes& a, BaseRes& b) {
    a.Swap(&b);
  }
  inline void Swap(BaseRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaseRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BaseRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BaseRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BaseRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BaseRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaseRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoModel.BaseRes";
  }
  protected:
  explicit BaseRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // .ProtoModel.ResStatus status = 1;
  void clear_status();
  ::ProtoModel::ResStatus status() const;
  void set_status(::ProtoModel::ResStatus value);
  private:
  ::ProtoModel::ResStatus _internal_status() const;
  void _internal_set_status(::ProtoModel::ResStatus value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoModel.BaseRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Basic_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BaseReq

// .ProtoModel.DataOrderType order = 1;
inline void BaseReq::clear_order() {
  order_ = 0;
}
inline ::ProtoModel::DataOrderType BaseReq::_internal_order() const {
  return static_cast< ::ProtoModel::DataOrderType >(order_);
}
inline ::ProtoModel::DataOrderType BaseReq::order() const {
  // @@protoc_insertion_point(field_get:ProtoModel.BaseReq.order)
  return _internal_order();
}
inline void BaseReq::_internal_set_order(::ProtoModel::DataOrderType value) {
  
  order_ = value;
}
inline void BaseReq::set_order(::ProtoModel::DataOrderType value) {
  _internal_set_order(value);
  // @@protoc_insertion_point(field_set:ProtoModel.BaseReq.order)
}

// bytes body = 2;
inline void BaseReq::clear_body() {
  body_.ClearToEmpty();
}
inline const std::string& BaseReq::body() const {
  // @@protoc_insertion_point(field_get:ProtoModel.BaseReq.body)
  return _internal_body();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BaseReq::set_body(ArgT0&& arg0, ArgT... args) {
 
 body_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProtoModel.BaseReq.body)
}
inline std::string* BaseReq::mutable_body() {
  std::string* _s = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:ProtoModel.BaseReq.body)
  return _s;
}
inline const std::string& BaseReq::_internal_body() const {
  return body_.Get();
}
inline void BaseReq::_internal_set_body(const std::string& value) {
  
  body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BaseReq::_internal_mutable_body() {
  
  return body_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BaseReq::release_body() {
  // @@protoc_insertion_point(field_release:ProtoModel.BaseReq.body)
  return body_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BaseReq::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  body_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (body_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProtoModel.BaseReq.body)
}

// -------------------------------------------------------------------

// BaseRes

// .ProtoModel.ResStatus status = 1;
inline void BaseRes::clear_status() {
  status_ = 0;
}
inline ::ProtoModel::ResStatus BaseRes::_internal_status() const {
  return static_cast< ::ProtoModel::ResStatus >(status_);
}
inline ::ProtoModel::ResStatus BaseRes::status() const {
  // @@protoc_insertion_point(field_get:ProtoModel.BaseRes.status)
  return _internal_status();
}
inline void BaseRes::_internal_set_status(::ProtoModel::ResStatus value) {
  
  status_ = value;
}
inline void BaseRes::set_status(::ProtoModel::ResStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:ProtoModel.BaseRes.status)
}

// string msg = 2;
inline void BaseRes::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& BaseRes::msg() const {
  // @@protoc_insertion_point(field_get:ProtoModel.BaseRes.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BaseRes::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProtoModel.BaseRes.msg)
}
inline std::string* BaseRes::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:ProtoModel.BaseRes.msg)
  return _s;
}
inline const std::string& BaseRes::_internal_msg() const {
  return msg_.Get();
}
inline void BaseRes::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BaseRes::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BaseRes::release_msg() {
  // @@protoc_insertion_point(field_release:ProtoModel.BaseRes.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BaseRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (msg_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProtoModel.BaseRes.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoModel

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ProtoModel::ResStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoModel::ResStatus>() {
  return ::ProtoModel::ResStatus_descriptor();
}
template <> struct is_proto_enum< ::ProtoModel::DataOrderType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoModel::DataOrderType>() {
  return ::ProtoModel::DataOrderType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Basic_2eproto
